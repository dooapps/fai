/*! \file */
/*******************************************
 *                                         *
 *  File auto-generated by `::safer_ffi`.  *
 *                                         *
 *  Do not manually edit this file.        *
 *                                         *
 *******************************************/

#ifndef __RUST_FBBL__
#define __RUST_FBBL__
#ifdef __cplusplus
extern "C" {
#endif


#include <stddef.h>
#include <stdint.h>

/** \brief
 *  `&'lt [T]` but with a guaranteed `#[repr(C)]` layout.
 *
 *  # C layout (for some given type T)
 *
 *  ```c
 *  typedef struct {
 *  // Cannot be NULL
 *  T * ptr;
 *  size_t len;
 *  } slice_T;
 *  ```
 *
 *  # Nullable pointer?
 *
 *  If you want to support the above typedef, but where the `ptr` field is
 *  allowed to be `NULL` (with the contents of `len` then being undefined)
 *  use the `Option< slice_ptr<_> >` type.
 */
typedef struct slice_ref_uint8 {
    /** \brief
     *  Pointer to the first element (if any).
     */
    uint8_t const * ptr;

    /** \brief
     *  Element count
     */
    size_t len;
} slice_ref_uint8_t;

/** \brief
 *  Descriptografa ID e retorna `u64`
 */
uint64_t
fbbl_decrypt_id (
    slice_ref_uint8_t data,
    slice_ref_uint8_t nonce);

/** \brief
 *  Buffer contendo dados alocados em Rust, para liberaçãopor C
 */
typedef struct FbblBuffer {
    /** <No documentation available> */
    uint8_t const * ptr;

    /** <No documentation available> */
    size_t len;
} FbblBuffer_t;

/** \brief
 *  Criptografa ID retornando buffer para C
 */
FbblBuffer_t
fbbl_encrypt_id (
    uint64_t id,
    slice_ref_uint8_t nonce);

/** \brief
 *  Libera o buffer retornado por `fbbl_encrypt_id`
 */
void
fbbl_free_buffer (
    FbblBuffer_t buf);

/** \brief
 *  Gera hash numérico seguro
 */
uint64_t
fbbl_generate_numeric_hash (
    char const * input);

/** \brief
 *  Inicializa o protector com chave hex de 32 bytes
 */
int32_t
fbbl_initialize (
    char const * hex_key);


#ifdef __cplusplus
} /* extern \"C\" */
#endif

#endif /* __RUST_FBBL__ */
